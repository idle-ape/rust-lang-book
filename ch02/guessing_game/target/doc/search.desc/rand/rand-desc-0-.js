searchState.loadedDescShard("rand", 0, "Utilities for random number generation\nTrait for casting types to byte slices\nIterator which will continuously generate random ascii …\nA marker trait used to indicate that an <code>RngCore</code> or …\nError type of random number generators\nError kind which can be matched over.\nA convenience extension to <code>SeedableRng</code> allowing …\nIterator which will generate a stream of random items.\nNot ready yet: recommended to try again a little later.\nA type that can be randomly generated using an <code>Rng</code>.\nAn automatically-implemented extension trait on <code>RngCore</code> …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nA transient failure which likely can be resolved or worked …\nFeature is not available; not recoverable.\nGeneral failure; there may be a chance of recovery on …\nReturn a mutable reference to self as a byte slice\nReturn a random element from <code>values</code>.\nReturn a mutable pointer to a random element from <code>values</code>.\nA description of this error kind\nGenerating random samples from probability distributions.\nFill <code>dest</code> entirely with random bytes (uniform value …\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance, automatically seeded with fresh …\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nReturn a random value supporting the <code>Standard</code> distribution.\nReturn an iterator of random characters from the set …\nReturn a bool with a probability <code>p</code> of being true.\nReturn an iterator that will yield an infinite number of …\nGenerate a random value in the range [<code>low</code>, <code>high</code>), i.e. …\nReturn a bool with a 1 in n chance of true\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe error kind\nThe error message\nCreate a new instance, with specified kind and a message.\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nConvenience re-export of common members\nPseudo-random number generators.\nGenerates a random instance of this type using the …\nGenerates a random value using the thread-local random …\nRandom number generators and adapters for common usage:\nDEPRECATED: use <code>seq::sample_iter</code> instead.\nSample a new value, using the given distribution.\nCreate an iterator that generates values using the given …\nCreate a new PRNG using a <code>u64</code> seed.\nFunctions for randomly accessing and sampling sequences.\nTrue if this kind of error may resolve itself on retry.\nTrue if we should retry but wait before retrying\nShuffle a mutable slice in place.\nTake the cause, if any. This allows the embedded cause to …\nRetrieve the lazily-initialized thread-local random number …\nCall <code>to_le</code> on each element (i.e. byte-swap on Big Endian …\nFill <code>dest</code> entirely with random bytes (uniform value …\nFill <code>dest</code> entirely with random data.\nDEPRECATED: use <code>SmallRng</code> instead.\nCreate a new instance, with specified kind, message, and a …\nSample a <code>char</code>, uniformly distributed over ASCII letters …\nThe Bernoulli distribution.\nThe binomial distribution <code>Binomial(n, p)</code>.\nThe Cauchy distribution <code>Cauchy(median, scale)</code>.\nThe chi-squared distribution <code>χ²(k)</code>, where <code>k</code> is the …\nAn iterator that generates random values of <code>T</code> with …\nTypes (distributions) that can be used to create a random …\nThe exponential distribution <code>Exp(lambda)</code>.\nSamples floating-point numbers according to the …\nThe Fisher F distribution <code>F(m, n)</code>.\nThe Gamma distribution <code>Gamma(shape, scale)</code> distribution.\n<code>Sample</code>s that do not require keeping track of state.\nThe log-normal distribution <code>ln N(mean, std_dev**2)</code>.\nThe normal distribution <code>N(mean, std_dev**2)</code>.\nA distribution to sample floating point numbers uniformly …\nA distribution to sample floating point numbers uniformly …\nSamples floating-point numbers according to the Pareto …\nThe Poisson distribution <code>Poisson(lambda)</code>.\nTypes that can be used to create a random instance of …\nA generic random value distribution, implemented for many …\nSamples floating-point numbers according to the normal …\nThe Student t distribution, <code>t(nu)</code>, where <code>nu</code> is the degrees …\nSample values uniformly between two bounds.\nA value with a particular weight for use with …\nA distribution that selects from a finite collection of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a random value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe actual item which is being weighted\nConstruct an object representing the <code>Gamma(shape, scale)</code> …\nCreate a new chi-squared distribution with …\nCreate a new <code>FisherF</code> distribution, with the given …\nCreate a new Student t distribution with <code>n</code> degrees of …\nConstruct a new <code>Normal</code> distribution with the given mean and\nConstruct a new <code>LogNormal</code> distribution with the given mean …\nConstruct a new <code>Exp</code> with the given shape parameter <code>lambda</code>. …\nConstruct a new Pareto distribution with given <code>scale</code> and …\nConstruct a new <code>Poisson</code> with the given shape parameter …\nConstruct a new <code>Binomial</code> with the given shape parameters <code>n</code> …\nConstruct a new <code>Bernoulli</code> with the given probability of …\nConstruct a new <code>Cauchy</code> with the given shape parameters …\nCreate a new <code>WeightedChoice</code>.\nDEPRECATED: Use <code>distributions::uniform</code> instead.\nGenerate a random value of <code>Support</code>, using <code>rng</code> as the …\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nCreate an iterator that generates random values of <code>T</code>, …\nA distribution uniformly sampling numbers within a given …\nThe numerical weight of this item\nHelper trait for creating objects using the correct …\nThe <code>UniformSampler</code> implementation supporting type <code>X</code>.\nSample values uniformly between two bounds.\nThe back-end implementing <code>UniformSampler</code> for <code>Duration</code>.\nThe back-end implementing <code>UniformSampler</code> for …\nThe back-end implementing <code>UniformSampler</code> for integer types.\nHelper trait handling actual uniform sampling.\nThe type sampled by this implementation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct self, with inclusive lower bound and exclusive …\nCreate a new <code>Uniform</code> instance which samples uniformly from …\nConstruct self, with inclusive bounds <code>[low, high]</code>.\nCreate a new <code>Uniform</code> instance which samples uniformly from …\nSample a value.\nSample a single value uniformly from a range with …\nAn Xorshift random number generator.\nThe ChaCha random number generator.\nReturns the argument unchanged.\nThe HC-128 random number generator.\nCalls <code>U::from(self)</code>.\nThe ISAAC random number generator.\nThe ISAAC-64 random number generator.\nCreates a new XorShiftRng instance which is not seeded.\nThe core of <code>ChaChaRng</code>, used with <code>BlockRng</code>.\nA cryptographically secure random number generator that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an ChaCha random number generator using the default …\nSet the stream number.\nThe core of <code>Hc128Rng</code>, used with <code>BlockRng</code>.\nA cryptographically secure random number generator that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an HC-128 random number generator with a seed. The …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe core of <code>IsaacRng</code>, used with <code>BlockRng</code>.\nA random number generator that uses the ISAAC algorithm.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRefills the output buffer, <code>results</code>. See also the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an ISAAC random number generator using an <code>u64</code> as …\nCreate an ISAAC random number generator using the default …\nCreate an ISAAC random number generator using an <code>u64</code> as …\nCreate an ISAAC random number generator using an <code>u64</code> as …\nThe core of <code>Isaac64Rng</code>, used with <code>BlockRng</code>.\nA random number generator that uses ISAAC-64, the 64-bit …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRefills the output buffer, <code>results</code>. See also the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an ISAAC-64 random number generator using an <code>u64</code> as …\nCreate an ISAAC-64 random number generator using an <code>u64</code> as …\nCreate a 64-bit ISAAC random number generator using the …\nCreate an ISAAC random number generator using an <code>u64</code> as …\nTimer too coarse to use as an entropy source.\nAn interface returning random data from external …\nA true random number generator based on jitter in the CPU …\nNo timer available.\nTimer is not monotonically increasing.\nA random number generator that retrieves randomness …\nAn RNG recommended when small state, cheap initialization …\nThe standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …\nThe type returned by <code>thread_rng</code>, essentially just a …\nAn error that can occur when <code>JitterRng::test_timer</code> fails.\nVariations of deltas of time too small.\nToo many stuck results (indicating no added entropy).\nWrappers / adapters forming RNGs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMock random number generator\nCreate a new <code>JitterRng</code>. Makes use of <code>std::time</code> for a …\nCreate a new <code>EntropyRng</code>.\nCreate a new <code>OsRng</code>.\nCreate a new <code>JitterRng</code>. A custom timer can be supplied, …\nConfigures how many rounds are used to generate each …\nBasic quality tests on the timer, by measuring CPU timing …\nStatistical test: return the timer delta of one normal run …\nAn RNG that reads random bytes straight from any type …\nA wrapper around any PRNG which reseeds the underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ReadRng</code> from a <code>Read</code>.\nCreate a new <code>ReseedingRng</code> with the given parameters.\nReseed the internal PRNG.\nA simple implementation of <code>RngCore</code> for testing purposes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a <code>StepRng</code>, yielding an arithmetic sequence starting …\nRandomly sample exactly <code>amount</code> indices from <code>0..length</code>.\nRandomly sample <code>amount</code> elements from a finite iterator.\nRandomly sample exactly <code>amount</code> values from <code>slice</code>.\nRandomly sample exactly <code>amount</code> references from <code>slice</code>.")