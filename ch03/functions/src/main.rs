/*
函数定义以 fn 关键字开始并在函数名后跟一对圆括号，大括号告诉编译器哪里是函数体的开始和结尾。
another_function 定义在 main 函数之后，也可以定义在之前。Rust 不关心函数定义于何处，只要定义了就行。

在函数签名中，必须声明每个参数的类型，返回值的类型也必须声明。

包含语句和表达式的函数体：
1. 语句（statments）是执行一些操作但不返回值的指令
2. 表达式计算并产生一个值，另外，表达式的结尾没有分号！！！
    语句 let y = 6; 中的 6 是一个表达式，它计算出的值是 6
    函数调用是一个表达式
    宏调用是一个表达式
    我们用来创建新作用域的大括号(代码块) {}，也是一个表达式
*/

fn main() {
    println!("Hello, world!");
    another_function(5, true);

    let y = 6; // 这是一个语句，语句不返回值；而 6 是一个表达式，它计算出的值是 6，表达式可以是语句的一部分！！！

    // 表达式会计算出一些值，并且你将编写的大部分 Rust 代码是由表达式组成的。
    // 数学运算，比如 5 + 6 ，这是一个表达式并计算出值 11
    let z = {
        let x = 3;
        x + 1 // 这是一个表达式，z 的值是 4
    };
    println!("The value of z = {}", z);

    let r = five();
    println!("The returned value of five() is {}", r);
}

// 不带返回值的函数
fn another_function(x: i32, y: bool) {
    println!("The value of x = {}, y = {}", x, y);
}

/*
具有返回值的函数
函数可以向它的调用者返回值。不必对返回值命名，但要在箭头后声明它的类型。
函数的返回值等同于函数体最后一个表达式的值，使用 return 和指定值，可以从函数中提前返回。大部分函数隐式的返回最后的表达式。
*/
fn five() -> i32 {
    5 // 这是一个表达式，隐式的返回
}

// 具有函数参数和返回值的函数，通过表达式隐式的返回值
fn plus_one(x: i32) -> i32 {
    x + 1
}
